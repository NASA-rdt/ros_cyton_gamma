#ifndef ecRigidWheelSoilInteractionContainer_H_
#define ecRigidWheelSoilInteractionContainer_H_
//------------------------------------------------------------------------------
// Copyright (c) 2004-2013 Energid Technologies. All rights reserved.
//
/// @file ecRigidWheelSoilInteractionContainer.h
/// @class EcRigidWheelSoilInteractionContainer
/// @brief An container class for computing interaction force between
///        rigid wheel and soil
//
//------------------------------------------------------------------------------
#include <actin/actin_config.h>  // Required to be first header.
#include <xml/ecXmlVarElemType.h>
#include "ecBaseRigidWheelSoilInteraction.h"

#ifdef _MSC_VER
// Disable warning about explicit instantiation of base class.
#  pragma warning(disable:4661)
#endif

class EC_ACTIN_SOILMECHANICS_DECL EcRigidWheelSoilInteractionContainer : public EcXmlVariableElementType<EcBaseRigidWheelSoilInteraction>
{
public:
   /// default constructor
   EcRigidWheelSoilInteractionContainer
      (
      );

   /// destructor
   virtual ~EcRigidWheelSoilInteractionContainer
      (
      );

   /// copy constructor
   EcRigidWheelSoilInteractionContainer
      (
      const EcRigidWheelSoilInteractionContainer& orig
      );

   /// assignment operator
   EcRigidWheelSoilInteractionContainer& operator=
      (
      const EcRigidWheelSoilInteractionContainer& orig
      );

   /// equality operator
   EcBoolean operator==
      (
      const EcRigidWheelSoilInteractionContainer& orig
      ) const;

   /// equality - virtual equality to an EcXmlObject pointer
   virtual EcBoolean equality
      (
      const EcXmlObject* other
      ) const;

   /// virtual new that returns an EcXmlObject
   virtual EcXmlObject* newObject
      (
      ) const;

   /// return a string token
   virtual const EcToken& token
      (
      ) const;

   /// clone - a virtual constructor to an EcXmlObject pointer
   virtual EcXmlObject* clone
      (
      ) const;

   /// register all component creators
   virtual void registerComponentCreators
      (
      );

   /// set the wheel properties
   virtual EcBoolean setWheelProperties
      (
      const EcWheelProperties& wheelProps
      );

   /// set the soil properties
   virtual EcBoolean setSoilProperties
      (
      const EcSoilProperties& soilProps
      );

   /// set the parameters
   virtual void setParameters
      (
      const EcMobilityParameters& params
      );

   /// compute and return the tractive force generated by the wheel
   virtual EcReal tractiveForce
      (
      ) const;

   /// compute and return the motion resistive force along the wheel
   virtual EcReal resistiveForce
      (
      ) const;

   /// compute and return the lateral force perpendicular to the wheel
   virtual EcReal lateralForce
      (
      ) const;

   /// compute and return the vertical force on the wheel
   virtual EcReal verticalForce
      (
      ) const;

   /// compute and return the wheel torque
   virtual EcReal wheelTorque
      (
      ) const;
};

#endif // ecRigidWheelSoilInteractionContainer_H_
