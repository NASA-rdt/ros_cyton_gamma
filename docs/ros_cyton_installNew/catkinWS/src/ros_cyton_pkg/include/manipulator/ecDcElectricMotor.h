#ifndef ecDcElectricMotor_H_
#define ecDcElectricMotor_H_
//------------------------------------------------------------------------------
// Copyright (c) 2008-2013 Energid Technologies. All rights reserved.
//
/// @file ecDcElectricMotor.h
/// @class EcDcElectricMotor
/// @brief A class describing power conversion by a DC electric motor.
//
//------------------------------------------------------------------------------
#include <foundation/foundation_config.h>  // Required to be first header.
#include "ecBasePowerConverter.h"

/**
\class EcDcElectricMotor
\brief A class describing power conversion by a DC electric motor.
*/
class EC_FOUNDATION_MANIPULATOR_DECL EcDcElectricMotor : public EcBasePowerConverter
{
public:
   /// default constructor
   EcDcElectricMotor
      (
      );

   /// destructor
   virtual ~EcDcElectricMotor
      (
      );

   /// copy constructor
   EcDcElectricMotor
      (
      const EcDcElectricMotor& orig
      );

   /// assignment operator
   EcDcElectricMotor& operator=
      (
      const EcDcElectricMotor& orig
      );

   /// equality operator
   EcBoolean operator==
      (
      const EcDcElectricMotor& orig
      ) const;

   /// initialize XML components for reading and writing
   virtual EcBoolean xmlInit
      (
      );

   /// read this object from an XML stream
   virtual EcBoolean read
      (
      EcXmlReader& stream
      );

   /// write this object to an XML stream
   virtual EcBoolean write
      (
      EcXmlWriter& stream
      ) const;

   /// clone - a virtual constructor to an EcXmlObject pointer
   virtual EcXmlObject* clone
      (
      ) const;

   /// register components with the parent
   virtual void registerComponents
      (
      );

   /// equality - virtual equality to an EcXmlObject pointer
   virtual EcBoolean equality
      (
      const EcXmlObject* other
      ) const;

   /// return a string token
   virtual const EcToken& token
      (
      ) const;

   /// virtual new that returns an EcXmlObject
   virtual EcXmlObject* newObject
      (
      ) const;

   /// gets the armature inductance
   virtual EcReal armatureInductance
      (
      ) const;

   /// sets the armature inductance
   virtual void setArmatureInductance
      (
      EcReal value
      );

   /// gets the armature resistance
   virtual EcReal armatureResistance
      (
      ) const;

   /// sets the armature resistance
   virtual void setArmatureResistance
      (
      EcReal value
      );

   /// gets the torque constant. Note that in SI unit, the speed constant is just the inverse of the torque constant.
   virtual EcReal torqueConstant
      (
      ) const;

   /// sets the torque constant
   virtual void setTorqueConstant
      (
      EcReal value
      );

   /// gets the maximum efficiency. The value is between 0 and 1. One means 100% efficient.
   virtual EcReal maxEfficiency
      (
      ) const;

   /// sets the maximum efficiency. Must be between 0 and 1.
   virtual void setMaxEfficiency
      (
      EcReal value
      );

   /// gets the no load speed in rad/s.
   virtual EcReal noLoadSpeed
      (
      ) const;

   /// sets the no load speed in rad/s.
   virtual void setNoLoadSpeed
      (
      EcReal value
      );

   /// gets the no load current in A.
   virtual EcReal noLoadCurrent
      (
      ) const;

   /// sets the no load current in A.
   virtual void setNoLoadCurrent
      (
      EcReal value
      );

   /// gets the stall torque.
   virtual EcReal stallTorque
      (
      ) const;

   /// sets the stall torque.
   virtual void setStallTorque
      (
      EcReal value
      );

   /// return the number of state variables for this power converter
   virtual EcU32 numStateVariables
      (
      ) const;

   /// computes and returns the output torque. The torque is generated by this power converter and passed on as an input torque to the mechanical part of the actuator.
   /**
   \param[in] input The control input
   \param[in, out] actuatorState The actuator state. Upon return the actuator state may be modified.
   */
   virtual EcReal outputTorque
      (
      EcReal input,
      EcActuatorState& actuatorState
      ) const;

   /// computes the time derivatives of the states of this power converter.
   /**
   \param[in] input The control input
   \param[in, out] actuatorState The actuator state. Upon return the actuator state may be modified.
   \param[out] derivatives Upon return, it will contain the time derivatives of the states.
   */
   virtual void computeStateDerivatives
   (
      EcReal input,
      EcActuatorState& actuatorState,
      EcXmlRealVector& derivatives
   ) const;

   /// token for this class
   static const EcToken& classToken
      (
      );

   /// static creator function
   static EcXmlObject* creator
      (
      );

   /// get an zero-information instance
   static EcDcElectricMotor nullObject
      (
      );
protected:
   EcXmlReal      m_ArmatureInductance;   ///< armature inductance
   EcXmlReal      m_ArmatureResistance;   ///< armature resistance
   EcXmlReal      m_TorqueConstant;       ///< torque constant
   EcXmlReal      m_MaxEfficienty;        ///< maximum efficiency (0-1)
   EcXmlReal      m_NoLoadSpeed;          ///< no load speed
   EcXmlReal      m_NoLoadCurrent;        ///< no load current
   EcXmlReal      m_StallTorque;          ///< stall torque

   /// non-XML data
   static const EcU32   m_theStateSize;   ///< The size of the state
};

#endif // ecDcElectricMotor_H_
