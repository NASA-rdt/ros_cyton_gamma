#ifndef ecPowerConverterContainer_H_
#define ecPowerConverterContainer_H_
//------------------------------------------------------------------------------
// Copyright (c) 2008-2013 Energid Technologies. All rights reserved.
//
/// @file ecPowerConverterContainer.h
/// @class EcPowerConverterContainer
/// @brief Holds a container for power converter description.
//
//------------------------------------------------------------------------------
#include <foundation/foundation_config.h>  // Required to be first header.
#include <xml/ecXmlVarElemType.h>
#include "ecBasePowerConverter.h"

#ifdef _MSC_VER
// Disable warning about explicit instantiation of base class.
#  pragma warning(disable:4661)
#endif

/// Holds a container for power converter description.
class EC_FOUNDATION_MANIPULATOR_DECL EcPowerConverterContainer : public EcXmlVariableElementType<EcBasePowerConverter>
{
public:
   /// default constructor
   EcPowerConverterContainer
      (
      );

   /// destructor
   virtual ~EcPowerConverterContainer
      (
      );

   /// copy constructor
   EcPowerConverterContainer
      (
      const EcPowerConverterContainer& orig
      );

   /// assignment operator
   EcPowerConverterContainer& operator=
      (
      const EcPowerConverterContainer& orig
      );

   /// equality operator
   EcBoolean operator==
      (
      const EcPowerConverterContainer& orig
      ) const;

   /// equality - virtual equality to an EcXmlObject pointer
   virtual EcBoolean equality
      (
      const EcXmlObject* other
      ) const;

   /// virtual new that returns an EcXmlObject
   virtual EcXmlObject* newObject
      (
      ) const;

   /// return a string token
   virtual const EcToken& token
      (
      ) const;

   /// clone - a virtual constructor to an EcXmlObject pointer
   virtual EcXmlObject* clone
      (
      ) const;

   /// register all component creators
   virtual void registerComponentCreators
      (
      );

   /// return the number of state variables for this power converter. This is just a pass-through to the element of this container. If there's no element, then it just returns 0.
   virtual EcU32 numStateVariables
      (
      ) const;

   /// computes and returns the output torque. The torque is generated by this power converter and passed on as an input torque to the mechanical part of the actuator. This is just a pass-through to the element of this container. If there's no element, then it just returns 0.
   /**
   \param[in] input The control input
   \param[in, out] actState The actuator state. Upon return the actuator state may be modified.
   */
   virtual EcReal outputTorque
      (
      EcReal input,
      EcActuatorState& actState
      ) const;

   /// computes the time derivatives of the states of this power converter. This is just a pass-through to the element of this container. If there's no element, then the returned derivatives vector will be empty.
   /**
   \param[in] input The control input
   \param[in, out] actuatorState The actuator state. Upon return the actuator state may be modified.
   \param[out] derivatives Upon return, it will contain the time derivatives of the states.
   */
   virtual void computeStateDerivatives
   (
      EcReal input,
      EcActuatorState& actuatorState,
      EcXmlRealVector& derivatives
   ) const;

   /// read this object from an XML stream
   virtual EcBoolean read
      (
      EcXmlReader& stream
      );

   /// write this object to an XML stream
   virtual EcBoolean write
      (
      EcXmlWriter& stream
      ) const;

   /// get a null object
   static EcPowerConverterContainer nullObject
      (
      );
};

#endif // ecPowerConverterContainer_H_
