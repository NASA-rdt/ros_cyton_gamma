#ifndef ecBasePowerConverter_H_
#define ecBasePowerConverter_H_
//------------------------------------------------------------------------------
// Copyright (c) 2008-2013 Energid Technologies. All rights reserved.
//
/// @file ecBasePowerConverter.h
/// @class EcBasePowerConverter
/// @brief A base class describing the power converter part of a
///        joint actuator.
//
//------------------------------------------------------------------------------
#include <foundation/foundation_config.h>  // Required to be first header.
#include <xml/ecXmlBasicType.h>
#include <xml/ecXmlCompType.h>
#include <xml/ecXmlVectorType.h>

class EcActuatorState;
class EcManipulatorLink;

/**
\class EcBasePowerConverter
\brief A abstract base class describing the power converter part of a joint actuator.

Examples of power converter include DC electric motor, servo valved hydraulic piston. This class is intended to abstract out the specifics for how power is converted from the power source (electricity or hydraulics) to the mechanical power that drives a joint actuator.
*/
class EC_FOUNDATION_MANIPULATOR_DECL EcBasePowerConverter : public EcXmlCompoundType
{
public:
   /// default constructor
   EcBasePowerConverter
      (
      );

   /// destructor
   virtual ~EcBasePowerConverter
      (
      );

   /// copy constructor
   EcBasePowerConverter
      (
      const EcBasePowerConverter& orig
      );

   /// assignment operator
   EcBasePowerConverter& operator=
      (
      const EcBasePowerConverter& orig
      );

   /// equality operator
   EcBoolean operator==
      (
      const EcBasePowerConverter& orig
      ) const;

   /// initialize XML components for reading and writing
   virtual EcBoolean xmlInit
      (
      );

   /// read this object from an XML stream
   virtual EcBoolean read
      (
      EcXmlReader& stream
      );

   /// write this object to an XML stream
   virtual EcBoolean write
      (
      EcXmlWriter& stream
      ) const;

   /// clone - a virtual constructor to an EcXmlObject pointer
   virtual EcXmlObject* clone
      (
      ) const=0;

   /// register components with the parent
   virtual void registerComponents
      (
      );

   /// equality - virtual equality to an EcXmlObject pointer
   virtual EcBoolean equality
      (
      const EcXmlObject* other
      ) const=0;

   /// return a string token
   virtual const EcToken& token
      (
      ) const=0;

   /// sets the manipulator link
   /*
   \param[in] pLink Pointer to the link that contains this actuator.
   */
   virtual void setManipulatorLink
      (
      const EcManipulatorLink* pLink
      );

   /// gets motor max torque
   virtual EcReal maxTorque
      (
      ) const;

   /// sets motor max torque
   virtual void setMaxTorque
      (
      EcReal value
      );

   /// gets motor min torque
   virtual EcReal minTorque
      (
      ) const;

   /// sets motor min torque
   virtual void setMinTorque
      (
      EcReal value
      );

   /// return the number of state variables for this power converter
   virtual EcU32 numStateVariables
      (
      ) const=0;

   /// scale the actuator properties by a distance scale factor
   /// and a joint-parameter scale factor.  A rotational joint, for example,
   /// would use (2,1) to double the size.  A prismatic joint would use
   /// (2,2) to double the size.
   virtual void scaleBy
      (
      EcReal distanceScaleFactor,
      EcReal jointParameterScaleFactor
      );

   /// computes and returns the output torque. The torque is generated by this power converter and passed on as an input torque to the mechanical part of the actuator.
   /**
   \param[in] input The control input
   \param[in, out] actState The actuator state. Upon return the actuator state may be modified.
   */
   virtual EcReal outputTorque
      (
      EcReal input,
      EcActuatorState& actState
      ) const=0;

   /// computes the time derivatives of the states of this power converter.
   /**
   \param[in] input The control input
   \param[in, out] actuatorState The actuator state. Upon return the actuator state may be modified.
   \param[out] derivatives Upon return, it will contain the time derivatives of the states.
   */
   virtual void computeStateDerivatives
   (
      EcReal input,
      EcActuatorState& actuatorState,
      EcXmlRealVector& derivatives
   ) const=0;

protected:
   /// limit the output torque to within the specified range
   virtual void limitOutputTorque
      (
      EcReal& torque
      ) const;

protected:
   /// the minimum torque available from the power converter
   EcXmlReal      m_MinTorque;

   /// the maximum torque available from the power converter
   EcXmlReal      m_MaxTorque;

   /// non-XML data
   /// Pointer to the link associated with this power converter
   const EcManipulatorLink*   m_pLink;
};

#endif // ecBasePowerConverter_H_
